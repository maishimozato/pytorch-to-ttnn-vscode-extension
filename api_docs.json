{
    "ttnn.as_tensor": {
        "parameters": [
            "tensor ( torch.Tensor ) – the input tensor.",
            "dtype ( ttnn.DataType , optional ) – The ttnn data type."
        ],
        "keyword_arguments": [
            "layout ( ttnn.Layout , optional ) – The ttnn layout. Defaults to ttnn.ROW_MAJOR_LAYOUT .",
            "device ( ttnn.MeshDevice , optional ) – The ttnn device. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The ttnn memory configuration. Defaults to None .",
            "cache_file_name ( str | pathlib.Path , optional ) – The cache file name. Defaults to None .",
            "preprocess ( Callable [ [ ttnn.Tensor ] , ttnn.Tensor ] , optional ) – The function to preprocess the tensor before serializing/converting to ttnn. Defaults to None .",
            "mesh_mapper ( ttnn.CppTensorToMesh , optional ) – The TensorToMesh to define the mapping from torch to multi-device. Defaults to None .",
            "use_device_tilizer ( bool , optional ) – The flag that toggles whether to use host vs. device tilizer. Defaults to False .",
            "enable_multihost_format ( bool , optional ) –",
            "Whether to use the multi-host format for the cache file. Defaults to False .",
            "For Grayskull, the on-device tilizer will truncate mantissa bits for bfp* formats.",
            "For Wormhole, the on-device tilizer will raise a runtime error (RTE) for bfp8 but will truncate for bfp4/2 formats."
        ],
        "returns": "ttnn.Tensor – The resulting ttnn tensor."
    },
    "ttnn.from_torch": {
        "parameters": [
            "tensor ( torch.Tensor ) – the input tensor.",
            "dtype ( ttnn.DataType , optional ) – the desired ttnn data type. Defaults to None ."
        ],
        "keyword_arguments": [
            "spec ( ttnn.TensorSpec , optional ) – the desired ttnn tensor spec. Defaults to None .",
            "tile ( ttnn.Tile , optional ) – the desired tiling configuration for the tensor. Defaults to None .",
            "pad_value ( float , optional ) – the desired padding value for tiling. Only used if layout is TILE_LAYOUT . Defaults to None .",
            "layout ( ttnn.Layout , optional ) – the desired ttnn layout. Defaults to ttnn.ROW_MAJOR_LAYOUT .",
            "device ( ttnn.MeshDevice , optional ) – the desired ttnn device. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The desired ttnn memory configuration. Defaults to None .",
            "mesh_mapper ( ttnn.TensorToMesh , optional ) – The desired ttnn mesh mapper. Defaults to None .",
            "cq_id ( int , optional ) – The command queue ID to use. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – The resulting ttnn tensor."
    },
    "ttnn.to_torch": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – the input tensor.",
            "dtype ( torch.dtype , optional ) – the desired torch data type of returned tensor. Defaults to None ."
        ],
        "keyword_arguments": [
            "torch_rank ( int , optional ) – Desired rank of the torch.Tensor . Defaults to None .\nWill use torch.squeeze operation to remove dimensions until the desired rank is reached. If not possible, the operation will raise an error.",
            "mesh_composer ( ttnn.CppMeshToTensor , optional ) – The desired ttnn mesh composer. Defaults to None .",
            "device ( ttnn.MeshDevice , optional ) – The ttnn device of the input tensor. Defaults to None .",
            "cq_id ( int , optional ) – The command queue ID to use. Defaults to 0 ."
        ],
        "returns": "torch.Tensor – The converted torch tensor."
    },
    "ttnn.to_device": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.from_device": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.to_layout": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – the input tensor to be organized.",
            "layout ( ttnn.Layout ) – the desired layout, either ttnn.ROW_MAJOR_LAYOUT or ttnn.TILE_LAYOUT .",
            "dtype ( ttnn.DataType , optional ) – the optional output data type.",
            "memory_config ( ttnn.MemoryConfig , optional ) – the optional output memory configuration."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the tensor with the requested layout."
    },
    "ttnn.dump_tensor": {
        "parameters": [
            "file_name ( str | pathlib.Path ) – The file name.",
            "tensor ( ttnn.Tensor ) – the tensor to be dumped.",
            "enable_multihost_format ( bool , optional ) – Whether to dump the tensor to the multi-host format. Defaults to False ."
        ],
        "keyword_arguments": [],
        "returns": "None – tensor saved to a specified file."
    },
    "ttnn.load_tensor": {
        "parameters": [
            "file_name ( str | pathlib.Path ) – the file name.",
            "enable_multihost_format ( bool , optional ) – Whether to load the tensor from the multi-host format. Defaults to False ."
        ],
        "keyword_arguments": [
            "device ( ttnn.MeshDevice , optional ) – the device. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the loaded tensor."
    },
    "ttnn.deallocate": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – The tensor whose resources will be released.",
            "force ( bool , optional ) – Whether to force deallocation, even if the buffer may have multiple references. Defaults to True."
        ],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.reallocate": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – the input tensor.",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the reallocated tensor. Defaults to None ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the reallocated tensor."
    },
    "ttnn.to_memory_config": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – the input tensor to be converted.",
            "memory_config ( ttnn.MemoryConfig ) – the desired memory configuration for the tensor.",
            "dtype ( ttnn.DataType , optional ) – the optional ttnn data type. Defaults to None ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the converted tensor."
    },
    "ttnn.arange": {
        "parameters": [
            "start ( int , optional ) – The start of the range. Defaults to 0.",
            "end ( int ) – The end of the range (exclusive).",
            "step ( int , optional ) – The step size between consecutive values. Defaults to 1.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to ttnn.bfloat16 .",
            "device ( ttnn.Device , optional ) – The device where the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration for the tensor. Defaults to ttnn.DRAM_MEMORY_CONFIG .",
            "layout ( ttnn.Layout , optional ) – The tensor layout. Defaults to ttnn.ROW_MAJOR ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A tensor containing evenly spaced values within the specified range."
    },
    "ttnn.empty": {
        "parameters": [
            "shape ( List [ int ] ) – The shape of the tensor to be created.",
            "dtype ( ttnn.DataType , optional ) – The tensor data type. Defaults to ttnn.bfloat16 .",
            "layout ( ttnn.Layout , optional ) – The tensor layout. Defaults to ttnn.ROW_MAJOR .",
            "device ( ttnn.Device | ttnn.MeshDevice ) – The device where the tensor will be allocated.",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration for the operation. Defaults to ttnn.DRAM_MEMORY_CONFIG ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – The output uninitialized tensor."
    },
    "ttnn.empty_like": {
        "parameters": [],
        "keyword_arguments": [
            "dtype ( ttnn.DataType , optional ) – The desired data type of the output tensor. Defaults to ttnn.bfloat16 .",
            "layout ( ttnn.Layout , optional ) – The desired layout of the output tensor. Defaults to ttnn.ROW_MAJOR .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device where the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration for the operation. Defaults to ttnn.DRAM_MEMORY_CONFIG ."
        ],
        "returns": "ttnn.Tensor – The output uninitialized tensor with the same shape as the reference tensor."
    },
    "ttnn.zeros": {
        "parameters": [
            "shape ( ttnn.Shape ) – The shape of the tensor.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to None .",
            "layout ( ttnn.Layout , optional ) – The layout of the tensor. Defaults to None .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device on which the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration of the tensor. Defaults to None ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A tensor filled with 0.0."
    },
    "ttnn.zeros_like": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – The tensor to use as a template for the shape of the new tensor.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to None .",
            "layout ( ttnn.Layout , optional ) – The layout of the tensor. Defaults to None .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device on which the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration of the tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A tensor filled with 0.0."
    },
    "ttnn.ones": {
        "parameters": [
            "shape ( ttnn.Shape ) – The shape of the tensor.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to None .",
            "layout ( ttnn.Layout , optional ) – The layout of the tensor. Defaults to None .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device on which the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration of the tensor. Defaults to None ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A tensor filled with 1.0."
    },
    "ttnn.ones_like": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – The tensor to use as a template for the shape of the new tensor.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to None .",
            "layout ( ttnn.Layout , optional ) – The layout of the tensor. Defaults to None .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device on which the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration of the tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A tensor filled with 1.0."
    },
    "ttnn.full": {
        "parameters": [
            "shape ( ttnn.Shape ) – The shape of the tensor.",
            "fill_value ( float ) – The value to fill the tensor with.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to None .",
            "layout ( ttnn.Layout , optional ) – The layout of the tensor. Defaults to None .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device on which the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration of the tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A filled tensor of specified shape and value."
    },
    "ttnn.full_like": {
        "parameters": [
            "tensor ( ttnn.Tensor ) – The tensor to use as a template for the shape of the new tensor.",
            "fill_value ( float | int ) – The value to fill the tensor with.",
            "dtype ( ttnn.DataType , optional ) – The data type of the tensor. Defaults to None .",
            "layout ( ttnn.Layout , optional ) – The layout of the tensor. Defaults to None .",
            "device ( ttnn.Device | ttnn.MeshDevice , optional ) – The device on which the tensor will be allocated. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – The memory configuration of the tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – A filled tensor."
    },
    "ttnn.matmul": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the first tensor to be multiplied. Needs to be on the device.",
            "input_tensor_b ( ttnn.Tensor ) – the second tensor to be multiplied. Needs to be on the device."
        ],
        "keyword_arguments": [
            "transpose_a ( bool , optional ) – Whether to transpose input_tensor_a. Defaults to False .",
            "transpose_b ( bool , optional ) – Whether to transpose input_tensor_b. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – the memory configuration of the output tensor. Defaults to None , which will result in using ttnn.DRAM_MEMORY_CONFIG.",
            "dtype ( ttnn.DataType ) – the data type of the output tensor. Defaults to None .",
            "program_config ( ttnn.MatmulProgramConfig ) – the program configuration for the matmul operation. Defaults to None .",
            "activation ( str , optional ) – the activation function to be applied. Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig ) – the compute kernel configuration for the matmul operation. Defaults to None .",
            "core_grid ( ttnn.CoreGrid ) – the grid on which to distribute the sharded tensor on (writes to the cores L1s). Defaults to None .",
            "output_tile ( List of [ int ] , optional ) – Specifies the output tile configuration. Defaults to None .",
            "optional_output_tensor ( ttnn.Tensor , optional ) – User provided on-device output tensor where the result of matmul is to be written. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.linear": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the first tensor to be multiplied. Needs to be on the device.",
            "input_tensor_b ( ttnn.Tensor ) – the second tensor to be multiplied. Needs to be on the device."
        ],
        "keyword_arguments": [
            "bias ( ttnn.Tensor , optional ) – the bias tensor to be added. If specified, needs to be on the device. Defaults to None .",
            "transpose_a ( bool , optional ) – Whether to transpose input_tensor_a. Defaults to False .",
            "transpose_b ( bool , optional ) – Whether to transpose input_tensor_b. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – the memory configuration of the output tensor. Defaults to None , which will result in using ttnn.DRAM_MEMORY_CONFIG .",
            "dtype ( ttnn.DataType , optional ) – the data type of the output tensor. Defaults to None .",
            "program_config ( MatmulProgramConfig , optional ) – the program configuration for the matmul operation. Defaults to None .",
            "activation ( str , optional ) – the activation function to be applied. Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig , optional ) – the compute kernel configuration for the matmul operation. Defaults to None .",
            "core_grid ( ttnn.CoreGrid , optional ) – the grid on which to distribute the sharded tensor on (writes to the cores L1s). Defaults to None .",
            "output_tile ( List of [ int ] , optional ) – Specifies the output tile configuration. Defaults to None .",
            "optional_output_tensor ( ttnn.Tensor , optional ) – User provided on-device output tensor where the result of linear is to be written. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.abs": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.acos": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.acosh": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.asin": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.asinh": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.atan": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.atanh": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.bitwise_not": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.bitwise_left_shift": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Integer ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.bitwise_right_shift": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Integer ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.cbrt": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ceil": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.celu": {
        "parameters": [],
        "keyword_arguments": [
            "alpha ( float ) – Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.clamp": {
        "parameters": [],
        "keyword_arguments": [
            "min ( float or ttnn.Tensor ) – Minimum value. Defaults to None .",
            "max ( float or ttnn.Tensor ) – Maximum value. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.clip": {
        "parameters": [],
        "keyword_arguments": [
            "min ( float or ttnn.Tensor ) – Minimum value. Defaults to None .",
            "max ( float or ttnn.Tensor ) – Maximum value. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.clone": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.cos": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.cosh": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.deg2rad": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.digamma": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.experimental.dropout": {
        "parameters": [],
        "keyword_arguments": [
            "seed ( uint32_t ) – seed used for RNG.",
            "probability ( float ) – Dropout probability. In average total_elems * probability elements will be zeroed out.",
            "scale ( float ) – Scales output tensor. In general scale = 1.0/(1.0-probability).",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.experimental.gelu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – The input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – The input tensor."
        ],
        "keyword_arguments": [
            "approximate ( str , optional ) – “tanh” or “none” (default). The gelu approximation algorithm to use.",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for this operation. Defaults to None.",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None.",
            "queue_id ( int , optional ) – Command queue ID. Defaults to 0."
        ],
        "returns": "ttnn.Tensor – The output tensor."
    },
    "ttnn.elu": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – The alpha parameter for the ELU function."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.eqz": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.erf": {
        "parameters": [],
        "keyword_arguments": [
            "fast_and_approximate_mode ( bool , optional ) – Use the fast and approximate mode. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.erfc": {
        "parameters": [],
        "keyword_arguments": [
            "fast_and_approximate_mode ( bool , optional ) – Use the fast and approximate mode. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.erfinv": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.exp": {
        "parameters": [],
        "keyword_arguments": [
            "fast_and_approximate_mode ( bool , optional ) – Use the fast and approximate mode. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.exp2": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.expm1": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.fill": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "fill_value ( float ) – The value to be filled in the output tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.floor": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.frac": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.geglu": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "dim ( int ) – Dimension to split input tensor. Supported only for last dimension (dim = -1 or 3). Defaults to -1 ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gelu": {
        "parameters": [],
        "keyword_arguments": [
            "fast_and_approximate_mode ( bool , optional ) – Use the fast and approximate mode. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.glu": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "dim ( int ) – Dimension to split input tensor. Supported only for last dimension (dim = -1 or 3). Defaults to -1 ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gez": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gtz": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.hardshrink": {
        "parameters": [],
        "keyword_arguments": [
            "lambd ( float , optional ) – lambd value. Defaults to 0.5 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.hardsigmoid": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.hardswish": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.hardtanh": {
        "parameters": [],
        "keyword_arguments": [
            "min_val ( float , optional ) – min value. Defaults to -1 .",
            "max_val ( float , optional ) – max value. Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.heaviside": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "value ( float ) – The value parameter for the Heaviside function."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.i0": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.identity": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.isfinite": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.isinf": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.isnan": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.isneginf": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.isposinf": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.leaky_relu": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "negative_slope ( float ) – The slope parameter for the Leaky ReLU function."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.lez": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.lgamma": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.log": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.log10": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.log1p": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.log2": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.log_sigmoid": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_not": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_not_": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logit": {
        "parameters": [],
        "keyword_arguments": [
            "eps ( float , optional ) – eps. Defaults to 0 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ltz": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.mish": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.multigammaln": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.neg": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.nez": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.normalize_global": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.normalize_hw": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.polygamma": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "k ( int ) – k value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.prelu": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or List [ float ] of length 1 or Number ) – weight."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.rad2deg": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.rdiv": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "value ( int ) – denominator value which is actually calculated as numerator float value >= 0."
        ],
        "keyword_arguments": [
            "round_mode ( string ) – rounding_mode value. Can be  None, “trunc”, “floor”. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.reciprocal": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.reglu": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "dim ( int ) – Dimension to split input tensor. Supported only for last dimension (dim = -1 or 3). Defaults to -1 ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.relu": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.relu_max": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "upper_limit ( float ) – The max value for ReLU function."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.relu_min": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "lower_limit ( float ) – The min value for ReLU function."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.relu6": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.remainder": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.round": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "decimals ( int ) – No. of decimal places to round off to [supported range -6 to 7], Defaults to 0.."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.rsqrt": {
        "parameters": [],
        "keyword_arguments": [
            "fast_and_approximate_mode ( bool , optional ) – Use the fast and approximate mode. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.selu": {
        "parameters": [],
        "keyword_arguments": [
            "scale ( float , optional ) – Scale value. Defaults to 1.0507 .",
            "alpha ( float , optional ) – Alpha value. Defaults to 1.67326 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.sigmoid": {
        "parameters": [],
        "keyword_arguments": [
            "vector_mode ( int , optional ) – Use vector mode to get better performance. Defaults to 4. Use 2 or 4 for different vector modes (2 -> Vector Mode C and 4 -> Vector Mode RC)”.",
            "fast_and_approximate_mode ( bool , optional ) – Use the fast and approximate mode. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.sigmoid_accurate": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.sign": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.signbit": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.silu": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.sin": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.sinh": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.softmax": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.softplus": {
        "parameters": [],
        "keyword_arguments": [
            "beta ( float , optional ) – Scales the input before applying the Softplus function. By modifying beta , you can adjust the steepness of the function. A higher beta value makes the function steeper, approaching a hard threshold like the ReLU function for large values of beta . Defaults to 1 .",
            "threshold ( float , optional ) – Used to switch to a linear function for large values to improve numerical stability. This avoids issues with floating-point representation for very large values. Defaults to 20 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.softshrink": {
        "parameters": [],
        "keyword_arguments": [
            "lambd ( float , optional ) – lambd value. Defaults to 0.5 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.softsign": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.sqrt": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.square": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.swiglu": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "dim ( int ) – Dimension to split input tensor. Supported only for last dimension (dim = -1 or 3). Defaults to -1 ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.swish": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.tan": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.tanh": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "accuracy ( Boolean , optional ) – provides better accuracy for input range -3 to 3, for dtype BFLOAT16. Defaults to False .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.tanhshrink": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.threshold": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "threshold ( float ) – Threshold value.",
            "value ( float ) – Replacing value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.tril": {
        "parameters": [],
        "keyword_arguments": [
            "diagonal ( float ) – diagonal value. Defaults to 0 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.triu": {
        "parameters": [],
        "keyword_arguments": [
            "diagonal ( float ) – diagonal value. Defaults to 0 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.trunc": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.unary_chain": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "ops_chain ( list [ ttnn.UnaryWithParam ] ) – list of unary ops to be chained."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.clamp_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "min ( float , optional ) – Minimum value. Defaults to None .",
            "max ( float , optional ) – Maximum value. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.clip_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "min ( float , optional ) – Minimum value. Defaults to None .",
            "max ( float , optional ) – Maximum value. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.hardtanh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "min ( float , optional ) – Minimum value. Defaults to -1 .",
            "max ( float , optional ) – Maximum value. Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.threshold_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "threshold ( float ) – the input threshold value.",
            "value ( float ) – the input value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.softplus_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "beta ( float , optional ) – Beta value for the Softplus formula . Defaults to 1 .",
            "threshold ( float , optional ) – Threshold value. Defaults to 20 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.rdiv_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "scalar ( float ) – divisor."
        ],
        "keyword_arguments": [
            "round_mode ( string , optional ) – Mode of Rounding. Defaults to None.",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.pow_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "exponent ( Number ) – Exponent value [must be non-negative]."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.exp_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.tanh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.sqrt_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.multigammaln_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.lgamma_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.fill_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.hardsigmoid_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.cos_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.acosh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.acos_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.atan_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.rad2deg_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.frac_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.trunc_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.log_sigmoid_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.fill_zero_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.i0_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.tan_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.sigmoid_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.rsqrt_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( uint8 , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.neg_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.relu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.logit_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.hardshrink_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "lambd ( float , optional ) – Lambda value for the hardshrink formula . Defaults to 0.5 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.softshrink_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "lambd ( float , optional ) – Lambda value for the softshrink formula . Defaults to 0.5 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.leaky_relu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "negative_slope ( float , optional ) – negative_slope value for the hardshrink formula . Defaults to 0.01 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.elu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "alpha ( float , optional ) – alpha value for the elu formula . Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.celu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "alpha ( float , optional ) – alpha value for the celu formula . Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.rpow_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "exponent ( float ) – Exponent value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.floor_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.round_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.log_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.relu6_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.abs_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ComplexTensor or ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.silu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.selu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.square_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.prod_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "dim ( int , optional ) – dimension to perform prod backward. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.hardswish_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.tanhshrink_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.atanh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.asin_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.asinh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.sin_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.sinh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.log10_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.log1p_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.erfc_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.ceil_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.softsign_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.cosh_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.logiteps_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "eps ( float , optional ) – eps value for the logiteps formula . Defaults to 0 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.log2_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.sign_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.div_no_nan_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "scalar ( float ) – Denominator value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.exp2_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.expm1_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.reciprocal_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor or ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ComplexTensor or ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.digamma_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.erfinv_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.erf_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.deg2rad_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.polygamma_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "n ( float ) – Order of polygamma function."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.gelu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "approximate ( string ) – Approximation type. Defaults to none .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( uint8 , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.repeat_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "shape ( List [ int ] ) – Shape of tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.real": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.imag": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.angle": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.is_imag": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.is_real": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.polar_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor ) – the input tensor.",
            "input_tensor ( ComplexTensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig ) – Memory configuration for the operation."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.imag_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input tensor.",
            "input_tensor ( ComplexTensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig ) – Memory configuration for the operation."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.real_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input tensor.",
            "input_tensor ( ComplexTensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig ) – Memory configuration for the operation."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.angle_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input tensor.",
            "input_tensor ( ComplexTensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig ) – Memory configuration for the operation."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.conj_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor ) – the input tensor.",
            "input_tensor ( ComplexTensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig ) – Memory configuration for the operation."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.conj": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory config for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.polar": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory config for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.alt_complex_rotate90": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.add": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor: 'None' | 'relu' . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.addalpha": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – the value to be multiplied."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.subalpha": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – the value to be multiplied."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.multiply": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor: 'None' | 'relu' . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.subtract": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor: 'None' | 'relu' . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.div": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "accurate_mode ( bool , optional ) – false if input_tensor_b is non-zero, else true (Only if the input tensor is not ComplexTensor). Defaults to false .",
            "round_mode ( string , optional ) – can be None , floor and trunc (only if the input tensor is not ComplexTensor). Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.div_no_nan": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.floor_div": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.fmod": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gcd": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensorINT32Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.lcm": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensorINT32Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_and_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_or_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_xor_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.rpow": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor. Supported for input range upto 28",
            "exponent ( float ) – exponent value. Non-positive values are not supported."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.rsub": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ldexp": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_and": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_or": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logical_xor": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor.Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.bitwise_and": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Integer ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.bitwise_or": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Integer ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.bitwise_xor": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Integer ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logaddexp": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.logaddexp2": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.hypot": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.xlogy": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.squared_difference": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gt": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gt_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.lt_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ge_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.le_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.eq_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ne_": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ge": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.lt": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.le": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.eq": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.ne": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.isclose": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "rtol ( float ) – relative tolerance. Defaults to 1e-05f .",
            "atol ( float ) – absolute tolerance. Defaults to 1e-08f .",
            "equal_nan ( bool ) – if NaN values should be treated as equal during comparison. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.nextafter": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.maximum": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensorSupported range for input_tensor_b when its of scalar type is [-16777216, 16777216]Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.minimum": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "activations ( List [ str ] , optional ) – list of activation functions to apply to the output tensor Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.outer": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.pow": {
        "parameters": [
            "input_tensor ( ttnn.Tensor , float ) – the input tensor.",
            "exponent ( float , int , ttnn.Tensor ) – the exponent value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.polyval": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "Coeffs ( Vector of floats ) – coefficients of the polynomial."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.scatter": {
        "parameters": [
            "input ( * ) – The input tensor to scatter values onto.",
            "dim ( * ) – The dimension to scatter along.",
            "index ( * ) – The tensor specifying indices where values from the source tensor must go to.",
            "src ( * ) – The tensor containing the source values to be scattered onto input."
        ],
        "keyword_arguments": [
            "reduce ( * ) – currently not supported - this is the option to reduce numbers going to the same destination in output with a function like amax , amin , sum , etc.",
            "memory_config ( * ) – Specifies the memory configuration for the output tensor. Defaults to None ."
        ],
        "returns": null
    },
    "ttnn.atan2": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.add_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor or ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ComplexTensor or ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ComplexTensor or ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": null
    },
    "ttnn.assign_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of other_tensor . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "round_mode ( str , optional ) – Round mode for the operation. Defaults to None ."
        ],
        "returns": null
    },
    "ttnn.atan2_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.bias_gelu_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "approximate ( string ) – Approximation type. Defaults to none .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.div_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor or ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ComplexTensor or ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ComplexTensor or ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "round_mode ( str , optional ) – Round mode for the operation (when input tensors are not ComplexTensor type). Can be  None, “trunc”, “floor”. Defaults to None .",
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of other_tensor . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.embedding_bw": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input indices tensor.",
            "weight ( ttnn.Tensor ) – the embeddings tensor that corresponds to the indices tensor. This tensor is only used to extract the vocabulary size.",
            "output_gradient_tensor ( ttnn.Tensor ) – the output gradient tensor from the previous backwards op."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to input tensor memory config .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "dtype ( ttnn.DataType , optional ) – the data type for the output tensor. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.fmod_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.remainder_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.addalpha_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – Alpha value. Defaults to 1 ."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.subalpha_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – Alpha value. Defaults to 1 ."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": null
    },
    "ttnn.xlogy_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.hypot_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.ldexp_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.logaddexp_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.logaddexp2_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.mul_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor or ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ComplexTensor or ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ComplexTensor or ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.sub_bw": {
        "parameters": [
            "grad_tensor ( ComplexTensor or ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ComplexTensor or ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ComplexTensor or ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": null
    },
    "ttnn.squared_difference_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.concat_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "dim ( int ) – Dimension to concatenate. Defaults to 0 ."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.rsub_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – List of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "input_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_a . Defaults to None .",
            "other_grad ( ttnn.Tensor , optional ) – Preallocated output tensor for gradient of input_tensor_b . Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": null
    },
    "ttnn.min_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.max_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.addcdiv": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "value ( float , optional ) – scalar value to be multiplied.",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.addcmul": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "value ( float , optional ) – scalar value to be multiplied.",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.mac": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.where": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor or Number ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": null
    },
    "ttnn.lerp": {
        "parameters": [
            "input ( ttnn.Tensor ) – the input tensor with the starting points.",
            "end ( ttnn.Tensor ) – the tensor with the ending points.",
            "weight ( ttnn.Tensor or float ) – the weight for the interpolation formula."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": null
    },
    "ttnn.addcmul_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – the alpha value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.addcdiv_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor ) – the input tensor.",
            "alpha ( float ) – the alpha value."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.where_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "are_required_outputs ( List [ bool ] , optional ) – list of required outputs. Defaults to [True, True] .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.lerp_bw": {
        "parameters": [
            "grad_tensor ( ttnn.Tensor ) – the input gradient tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_c ( ttnn.Tensor or Number ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.l1_loss": {
        "parameters": [
            "input_reference ( ttnn.Tensor ) – the input tensor.",
            "input_prediction ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "reduction ( bool , optional ) – Loss Reduction Mode. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.mse_loss": {
        "parameters": [
            "input_reference ( ttnn.Tensor ) – the input tensor.",
            "input_prediction ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "reduction ( bool , optional ) – Loss Reduction Mode. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.cumprod": {
        "parameters": [
            "input ( ttnn.Tensor ) – input tensor",
            "dim ( int ) – dimension along which to compute cumulative product"
        ],
        "keyword_arguments": [
            "dtype ( ttnn.DataType , optional ) – desired output type. If specified then input tensor will be casted to dtype before processing.",
            "reverse_order ( bool , optional , default False ) – whether to perform accumulation from the end to the beginning of accumulation axis.",
            "out ( ttnn.Tensor , optional ) – preallocated output. If specified, out must have same shape as input , and must be on the same device."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.max": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor: the output tensor."
    },
    "ttnn.mean": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor: the output tensor."
    },
    "ttnn.min": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor: the output tensor."
    },
    "ttnn.std": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor: the output tensor."
    },
    "ttnn.sum": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor: the output tensor."
    },
    "ttnn.var": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor: the output tensor."
    },
    "ttnn.argmax": {
        "parameters": [],
        "keyword_arguments": [
            "dim ( int , optional ) – dimension to reduce. Defaults to None .",
            "keepdim ( bool , optional ) – whether to keep the reduced dimension. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – Output tensor containing the indices of the maximum value."
    },
    "ttnn.prod": {
        "parameters": [],
        "keyword_arguments": [
            "dim ( int , optional ) – Dimension to perform prod. Defaults to None .",
            "keepdim ( bool , optional ) – keep original dimension size. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.topk": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "k ( number ) – the number of top elements to look for.",
            "dim ( number ) – the dimension to reduce.",
            "largest ( bool ) – whether to return the largest or the smallest elements. Defaults to False .",
            "sorted ( bool ) – whether to return the elements in sorted order. Defaults to False ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "sub_core_grids ( ttnn.CoreRangeSet , optional ) – Core range set to run the operation on. Defaults to None .",
            "indices_tensor ( ttnn.Tensor , optional ) – Preallocated indices tensor. Defaults to None ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.cumsum": {
        "parameters": [
            "input ( ttnn.Tensor ) – input tensor",
            "dim ( int ) – dimension along which to compute cumulative sum"
        ],
        "keyword_arguments": [
            "dtype ( ttnn.DataType , optional ) – desired output type. If specified then input tensor will be cast to dtype before processing.",
            "reverse_order ( bool , optional , default False ) – whether to perform accumulation from the end to the beginning of accumulation axis.",
            "out ( ttnn.Tensor , optional ) – preallocated output. If specified, out must have same shape as input , and must be on the same device."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.concat": {
        "parameters": [
            "input_tensor ( List of ttnn.Tensor ) – the input tensors.",
            "dim ( number ) – the concatenating dimension."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "groups ( int , optional ) – When groups is set to a value greater than 1, the inputs are split into N groups partitions, and elements are interleaved from each group into the output tensor. Each group is processed independently, and elements from each group are concatenated in an alternating pattern based on the number of groups. This is useful for recombining grouped convolution outputs during residual concatenation. Defaults to 1 . Currently, groups > 1 is only supported for two height sharded input tensors."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.nonzero": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensors."
    },
    "ttnn.pad": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.permute": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": "List of ttnn.Tensor – the output tensor. Example: >>> tensor = ttnn . to_device ( ttnn . from_torch ( torch . zeros (( 1 , 1 , 64 , 32 ), dtype = torch . bfloat16 )), device ) >>> output = ttnn . permute ( tensor , ( 0 , 1 , 3 , 2 )) >>> print ( output . shape ) [1, 1, 32, 64]"
    },
    "ttnn.reshape": {
        "parameters": [
            "input_tensor ( * ) – Input Tensor.",
            "new_shape ( * ) – New shape of tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor with the new shape."
    },
    "ttnn.repeat": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "repetition_vector ( SmallVector ) – The number of repetitions for each dimension."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.repeat_interleave": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "repeats ( number ) – he number of repetitions for each element. repeats is broadcasted to fit the shape of the given axis.",
            "dim ( number ) – the dimension to expand with the repetitions."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.slice": {
        "parameters": [
            "input_tensor – Input Tensor.",
            "slice_start – Start indices of input tensor. Values along each dim must be < input_tensor_shape[i].",
            "slice_end – End indices of input tensor. Values along each dim must be < input_tensor_shape[i].",
            "slice_step – (Optional[List[int[tensor rank]]) Step size for each dim. Default is None, which works out be 1 for each dimension."
        ],
        "keyword_arguments": [
            "tensor ( memory_config Memory Config of the output ) –",
            "queue_id ( uint8 , optional ) –",
            "pad_value – Optional value to fill padding for tiled tensors. Padding values are unmodified (and undefined) by default"
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.tilize": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "dtype ( data type , optional ) – Data type of the output tensor. Defaults to None .",
            "use_multicore ( bool , optional ) – Whether to use multicore. Defaults to True .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.tilize_with_val_padding": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "output_tensor_shape ( shape ) – Shape of the output tensor.",
            "pad_value ( number ) – Value to pad the output tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "dtype ( data type , optional ) – Data type of the output tensor. Defaults to None .",
            "use_multicore ( bool , optional ) – Whether to use multicore. Defaults to True .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.fill_rm": {
        "parameters": [
            "N ( number ) – Batch count of output tensor.",
            "C ( number ) – Channel count of output tensor.",
            "H ( number ) – Height count of output tensor.",
            "W ( number ) – Width count of output tensor.",
            "hOnes ( number ) – Height of high values region.",
            "wOnes ( number ) – Width of high values region.",
            "any ( ttnn.tensor ) – Any input tensor with desired device and data types for output tensor. value greater than 0",
            "val_hi ( number ) – High value to use.",
            "val_lo ( number ) – Low value to use."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.fill_ones_rm": {
        "parameters": [
            "N ( number ) – Batch count of output tensor.",
            "C ( number ) – Channel count of output tensor.",
            "H ( number ) – Height count of output tensor.",
            "W ( number ) – Width count of output tensor.",
            "hOnes ( number ) – Height of high values region.",
            "wOnes ( number ) – Width of high values region.",
            "any ( ttnn.tensor ) – Any input tensor with desired device and data types for output tensor. value greater than 0"
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.untilize": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "use_multicore ( bool , optional ) – Whether to use multicore. Defaults to True .",
            "use_pack_untilize ( bool , optional ) – Whether to use pack untilize. Defaults to True .",
            "sub_core_grids ( ttnn.CoreRangeSet , optional ) – Sub core grids. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.untilize_with_unpadding": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor",
            "output_tensor_end ( shape ) – End indices of input tensor in output tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "use_multicore ( bool , optional ) – Whether to use multicore. Defaults to True .",
            "use_pack_untilize ( bool , optional ) – Whether to use pack untilize. Defaults to True .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "List of ttnn.Tensor – the output tensor."
    },
    "ttnn.indexed_fill": {
        "parameters": [
            "batch_id ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_a ( ttnn.Tensor ) – the input tensor.",
            "input_tensor_b ( ttnn.Tensor ) – the input tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "dim ( int , optional ) – Dimension value. Defaults to 0 .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.gather": {
        "parameters": [
            "input ( ttnn.Tensor ) – The source tensor from which values are gathered.",
            "dim ( int ) – The dimension along which values are gathered.",
            "index ( ttnn.Tensor ) – A tensor containing the indices of elements to gather, with the same number of dimensions as the input tensor.\nThe index tensor must be of type uint16 or uint32."
        ],
        "keyword_arguments": [
            "sparse_grad ( bool , optional ) – If True , the gradient computation will be sparse. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Specifies the memory configuration for the output tensor. Defaults to None .",
            "out ( ttnn.Tensor , optional ) – A preallocated tensor to store the gathered values. Defaults to None ."
        ],
        "returns": null
    },
    "ttnn.sort": {
        "parameters": [],
        "keyword_arguments": [
            "dim ( int , optional ) – The dimension along which to sort. Defaults to -1 (last dimension).",
            "descending ( bool , optional ) – If True , sorts in descending order. Defaults to False .",
            "stable ( bool , optional ) – If True , ensures the original order of equal elements is preserved. Defaults to False .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Specifies the memory configuration for the output tensor. Defaults to None .",
            "out ( tuple of ttnn.Tensor , optional ) – Preallocated output tensors for the sorted values and indices. Defaults to None . The index tensor must be of type uint16 or uint32."
        ],
        "returns": null
    },
    "ttnn.group_norm": {
        "parameters": [],
        "keyword_arguments": [
            "num_groups ( int ) –",
            "epsilon ( float ) – 1e-12.",
            "input_mask ( ttnn.Tensor , optional ) – Defaults to None . When processing the inputs, the mask is used to only look at the elements of the current group.",
            "weight ( ttnn.Tensor , optional ) – Defaults to None .",
            "bias ( ttnn.Tensor , optional ) – Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – Defaults to None .",
            "core_grid ( CoreGrid , optional ) – Defaults to None .",
            "inplace ( bool , optional ) – Defaults to True .",
            "output_layout ( ttnn.Layout , optional ) – Defaults to None .",
            "num_out_blocks ( int , optional ) – Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig , optional ) – Compute kernel configuration for the op. Defaults to None .",
            "negative_mask – Defaults to None . Can be used only in row-major sharded input/output tensors. Used to reduce the number of CB’s used in the sharded version of the kernel by overlapping the CB’s used for tilized input and output. (The kernel is in fact row major variant, but is internally tilizing RM into tilized inputs)."
        ],
        "returns": null
    },
    "ttnn.layer_norm": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "epsilon ( float ) – 1e-12.",
            "weight ( ttnn.Tensor , optional ) – Defaults to None .",
            "bias ( ttnn.Tensor , optional ) – Defaults to None .",
            "residual_input_tensor ( ttnn.Tensor , optional ) – Defaults to None .",
            "program_config ( ttnn.ProgramConfig , optional ) – Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig ) –",
            "Returns – ttnn.Tensor: the output tensor."
        ],
        "returns": null
    },
    "ttnn.rms_norm": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "epsilon ( float ) – 1e-12.",
            "weight ( ttnn.Tensor , optional ) – Defaults to None .",
            "bias ( ttnn.Tensor , optional ) – Defaults to None .",
            "residual_input_tensor ( ttnn.Tensor , optional ) – Defaults to None .",
            "program_config ( ttnn.ProgramConfig , optional ) – Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig ) – Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.batch_norm": {
        "parameters": [],
        "keyword_arguments": [
            "eps ( float , optional ) – Epsilon value. Defaults to 1e-05 .",
            "momentum ( float , optional ) – Momentum value. Defaults to 0.1 .",
            "running_mean ( ttnn.Tensor , optional ) – the running_mean of shape [1, C, 1, 1] , required in inference mode. When in training mode, this tensor is optional and the updated running mean value is stored in-place based on the inputs provided. Defaults to None .",
            "running_var ( ttnn.Tensor , optional ) – the running_var of shape [1, C, 1, 1] , required in inference mode. When in training mode, this tensor is optional and the updated running variance value is stored in-place based on the inputs provided. Defaults to None .",
            "weight ( ttnn.Tensor , optional ) – the weight or gamma value of shape [1, C, 1, 1] . Defaults to None .",
            "bias ( ttnn.Tensor , optional ) – the bias or beta value of shape [1, C, 1, 1] . Defaults to None .",
            "training ( bool , optional ) – Selection between training mode and inference (evaluation) mode. Defaults to False (Inference mode).",
            "output ( ttnn.Tensor , optional ) – Preallocated output tensor to store batch norm result of shape [N, C, H, W] . Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – memory configuration for the operation. Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig , optional ) – device compute kernel configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.moreh_sum": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.transformer.split_query_key_value_and_split_heads": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – Input Tensor for Query, Key and Value. If kv_input_tensor is not None, then input_tensor is only used for Query.",
            "kv_input_tensor ( ttnn.Tensor ) – Input Tensor for Key and Value. If passed in, input_tensor has to be used only for Query. Defaults to None ."
        ],
        "keyword_arguments": [
            "num_heads ( int ) – num heads to split into.",
            "num_kv_heads ( int , optional ) – num heads of Key and num heads of Value. If not passed in, then num_kv_heads is set to num_heads . Defaults to None .",
            "transpose_key ( bool ) – Whether to transpose the Key tensor on the last two dimensions. Defaults to true",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "Tuple[ttnn.Tensor, ttnn.Tensor, ttnn.Tensor] – the output tensor."
    },
    "ttnn.transformer.concatenate_heads": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config – Memory Config of the output tensor, if None then it gets set to input_tensor.memory_config(). Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.transformer.attention_softmax": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "head_size ( int , optional ) – Number of heads. Defaults to None .",
            "attention_mask ( ttnn.Tensor , optional ) – Attention Mask. Defaults to None .",
            "program_config ( SoftmaxProgramConfig ) – Program Config of the output tensor. Defaults to SoftmaxDefaultProgramConfig() .",
            "causal_mask ( bool , optional ) – the attention mask is causal. Defaults to false ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.transformer.attention_softmax_": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "head_size ( int , optional ) – Number of heads. Defaults to None .",
            "attention_mask ( ttnn.Tensor , optional ) – Attention Mask. Defaults to None .",
            "program_config ( SoftmaxProgramConfig ) – Program Config of the output tensor. Defaults to SoftmaxDefaultProgramConfig() .",
            "causal_mask ( bool , optional ) – the attention mask is causal. Defaults to false ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.experimental.rotary_embedding": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "cod_cache ( ttnn.Tensor ) – the Cosine Cache tensor.",
            "sin_cache ( ttnn.Tensor ) – the Sine Cache tensor.",
            "token_index ( int , optional ) – Defaults to None ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig , optional ) – Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.transformer.scaled_dot_product_attention": {
        "parameters": [
            "input_tensor_q ( ttnn.Tensor ) – the input tensor.          [b x nqh x s x dh]",
            "input_tensor_k ( ttnn.Tensor ) – the input tensor.          [b x nkv x s x dh]",
            "input_tensor_v ( ttnn.Tensor ) – the input tensor.          [b x nkv x s x dh]"
        ],
        "keyword_arguments": [
            "attn_mask ( ttnn.Tensor , optional ) – Defaults to None . [b x 1 x s x s]. Head broadcasting is implied.",
            "is_causal ( bool ) – Defaults to true .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "scale ( float , optional ) – Defaults to None .",
            "program_config ( SDPAProgramConfig , optional ) – Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig , optional ) – Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor [b x nqh x s x dh]."
    },
    "ttnn.transformer.scaled_dot_product_attention_decode": {
        "parameters": [
            "input_tensor_q ( ttnn.Tensor ) – the input tensor [1 x b x nh x dh]",
            "input_tensor_k ( ttnn.Tensor ) – the input tensor [b x nkv x   s x dh]",
            "input_tensor_v ( ttnn.Tensor ) – the input tensor [b x nkv x   s x dh]"
        ],
        "keyword_arguments": [
            "is_causal ( bool ) – whether the attention is is_causal. Defaults to True .",
            "attn_mask ( ttnn.Tensor , optional ) – the input tensor [b x 1 x s x s]. Defaults to None .",
            "cur_pos ( List of int , optional ) – list of integers of length b. Defaults to None .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "cur_pos_tensor ( ttnn.Tensor , optional ) – [b] tensor of integers of length b. Defaults to None .",
            "scale ( float , optional ) – Defaults to None .",
            "program_config ( SDPAProgramConfig , optional ) – Defaults to None .",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig , optional ) – Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor [1 x b x pnh x dh]."
    },
    "ttnn.all_gather": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – multi-device tensor.",
            "dim ( int ) – Dimension to perform operation.",
            "cluster_axis ( int ) – Provided a MeshTensor, the axis corresponding to MeshDevice to perform the line-all-gather operation on.",
            "mesh_device ( MeshDevice ) – Device mesh to perform the line-all-gather operation on."
        ],
        "keyword_arguments": [
            "num_links ( int , optional ) – Number of links to use for the all-gather operation. Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to input tensor memory config .",
            "num_workers ( int , optional ) – Number of workers to use for the operation. Defaults to None .",
            "num_buffers_per_channel ( int , optional ) – Number of buffers per channel to use for the operation. Defaults to None .",
            "topology ( ttnn.Topology , optional ) – The topology configuration to run the operation in. Valid options are Ring and Linear. Defaults to ttnn.Topology.Ring ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.reduce_scatter": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – multi-device tensor",
            "dim ( int ) – Dimension to perform operation",
            "cluster_axis ( int ) – Provided a MeshTensor, the axis corresponding to MeshDevice to perform the line-reduce-scatter operation on.",
            "mesh_device ( MeshDevice ) – Device mesh to perform the line-reduce-scatter operation on."
        ],
        "keyword_arguments": [
            "num_links ( int , optional ) – Number of links to use for the reduce0scatter operation. Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to input tensor memory config .",
            "num_workers ( int , optional ) – Number of workers to use for the operation. Defaults to None .",
            "num_buffers_per_channel ( int , optional ) – Number of buffers per channel to use for the operation. Defaults to None .",
            "topology ( ttnn.Topology , optional ) – The topology configuration to run the operation in. Valid options are Ring and Linear. Defaults to ttnn.Topology.Ring ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.experimental.all_reduce": {
        "parameters": [],
        "keyword_arguments": [
            "num_links ( int , optional ) – Number of links to use for the all-gather operation. Defaults to 1 .",
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to input tensor memory config .",
            "num_workers ( int , optional ) – Number of workers to use for the operation. Defaults to None .",
            "num_buffers_per_channel ( int , optional ) – Number of buffers per channel to use for the operation. Defaults to None .",
            "topology ( ttnn.Topology , optional ) – The topology configuration to run the operation in. Valid options are Ring and Linear. Defaults to ttnn.Topology.Ring ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.embedding": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input indices tensor.",
            "weight ( ttnn.Tensor ) – the embeddings tensor that corresponds to the indices tensor."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to input tensor memory config .",
            "output_tensor ( ttnn.Tensor , optional ) – Preallocated output tensor. Defaults to None .",
            "queue_id ( int , optional ) – command queue id. Defaults to 0 .",
            "padding_idx ( int , optional ) – the padding token. Default to None .",
            "layout ( ttnn.Layout ) – the layout of the output tensor. Defaults to ttnn.ROW_MAJOR_LAYOUT .",
            "embeddings_type ( ttnn.EmbeddingsType ) – the type of embeddings. Defaults to ttnn._ttnn.operations.embedding.EmbeddingsType.GENERIC .",
            "dtype ( ttnn.DataType , optional ) – the data type for the output tensor. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor of layout == layout or layout of the weights tensor."
    },
    "ttnn.conv1d": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – The input tensor. This must be in the format [N, H, W, C]. It can be on host or device.",
            "weight_tensor ( ttnn.Tensor ) – The weight tensor. The weights can be passed in the same format as PyTorch, [out_channels, in_channels, kernel_height, kernel_width]. The op w",
            "bias_tensor ( ttnn.Tensor , None ) – Optional bias tensor. Default: None",
            "device ( ttnn.MeshDevice ) – The device to use.",
            "in_channels ( int ) – Number of input channels.",
            "out_channels ( int ) – Number of output channels.",
            "batch_size ( int ) – Batch size.",
            "input_length ( int ) – Length of the input signal.",
            "kernel_size ( int ) – Size of the convolving kernel.",
            "stride ( int ) – Stride of the cross-correlation.",
            "padding ( int or tuple [ int , int ] ) ) – Zero-padding added to both sides of the input. pad_length or [pad_left, pad_right].",
            "dilation ( int ) – Spacing between kernel elements.",
            "groups ( int ) – Number of blocked connections from input channels to output channels.",
            "dtype ( ttnn.DataType , None ) – The data type of the input tensor. Default: None (will use the same dtype as input_tensor).",
            "conv_config ( ttnn.Conv2dConfig , None ) – Configuration for convolution. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – Configuration for compute kernel. Default: None",
            "memory_config ( ttnn.MemoryConfig , None ) – Output Tensor’s Memory Configuration. Default: None",
            "return_output_dim ( bool ) – If true, the op also returns the height and width of the output tensor in [N, H, W, C] format,",
            "return_weights_and_bias ( bool ) – If true, the op also returns the preprocessed weight and bias on device ."
        ],
        "keyword_arguments": [],
        "returns": "The output tensor, output height and width, and the preprocessed weights and bias."
    },
    "ttnn.conv2d": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – The input tensor. This must be in the format [N, H, W, C]. It can be on host or device.",
            "weight_tensor ( ttnn.Tensor ) – The weight tensor. The weights can be passed in the same format as PyTorch, [out_channels, in_channels, kernel_height, kernel_width]. The op w",
            "bias_tensor ( ttnn.Tensor , None ) – Optional bias tensor. Default: None",
            "device ( ttnn.MeshDevice ) – The device to use.",
            "in_channels ( int ) – Number of input channels.",
            "out_channels ( int ) – Number of output channels.",
            "batch_size ( int ) – Batch size.",
            "input_height ( int ) – Height of the input tensor.",
            "input_width ( int ) – Width of the input tensor.",
            "kernel_size ( tuple [ int , int ] ) – Size of the convolving kernel.",
            "stride ( tuple [ int , int ] ) – Stride of the cross-correlation.",
            "padding ( tuple [ int , int ] or tuple [ int , int , int , int ] ) ) – Zero-padding added to both sides of the input. [pad_height, pad_width] or [pad_top, pad_bottom, pad_left, pad_right].",
            "dilation ( tuple [ int , int ] ) – Spacing between kernel elements.",
            "groups ( int ) – Number of blocked connections from input channels to output channels.",
            "dtype ( ttnn.DataType , None ) – The data type of the output tensor. Default: None (inferred from input tensor).",
            "conv_config ( ttnn.Conv2dConfig , None ) – Configuration for convolution. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – Configuration for compute kernel. Default: None",
            "memory_config ( ttnn.MemoryConfig , None ) – Output Tensor’s Memory Configuration. Default: None",
            "return_output_dim ( bool ) – If true, the op also returns the height and width of the output tensor in [N, H, W, C] format,",
            "return_weights_and_bias ( bool ) – If true, the op also returns the preprocessed weight and bias on device ."
        ],
        "keyword_arguments": [],
        "returns": "The output tensor, output height and width, and the preprocessed weights and bias."
    },
    "ttnn.experimental.conv3d": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – Input tensor.",
            "weight_tensor ( ttnn.Tensor ) – Weight tensor.",
            "bias_tensor ( ttnn.Tensor ) – Bias tensor.",
            "config ( ttnn.Conv3dConfig ) – Configuration for the Conv3D operation.",
            "memory_config ( ttnn.MemoryConfig ) – Memory configuration for the output of the Conv3D operation.",
            "compute_kernel_config ( ttnn.DeviceComputeKernelConfig ) – Compute kernel configuration for the Conv3D operation.",
            "queue_id – Queue ID for the Conv3D operation."
        ],
        "keyword_arguments": [],
        "returns": "Output tensor after applying the Conv3D operation."
    },
    "ttnn.conv_transpose2d": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "weight_tensor ( ttnn.Tensor ) – the weight tensor.",
            "bias_tensor ( ttnn.Tensor , None ) – optional bias tensor. Default: None",
            "device ( ttnn.MeshDevice ) – the device to use.",
            "in_channels ( int ) – number of input channels.",
            "out_channels ( int ) – number of output channels.",
            "batch_size ( int ) – batch size.",
            "input_height ( int ) – height of the input tensor.",
            "input_width ( int ) – width of the input tensor.",
            "kernel_size ( tuple [ int , int ] ) – size of the convolving kernel.",
            "stride ( tuple [ int , int ] ) – stride of the cross-correlation.",
            "padding ( tuple [ int , int ] or tuple [ int , int , int , int ] ) ) – zero-padding added to both sides of the input. [pad_height, pad_width] or [pad_top, pad_bottom, pad_left, pad_right].",
            "dilation ( tuple [ int , int ] ) – spacing between kernel elements.",
            "groups ( int ) – number of blocked connections from input channels to output channels.",
            "dtype ( DataType , None ) – the data type of the output tensor. Default: None (will use the same dtype as input_tensor).",
            "conv_config ( ttnn.Conv2dConfig , None ) – configuration for convolution. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – configuration for compute kernel. Default: None",
            "mirror_kernel ( bool ) – Determines if the op should mirror the kernel internally. Should be set to True if the kernel has already been mirrored.",
            "queue_id ( int ) – the queue id to use for the operation. Default: 0 .",
            "return_output_dim ( bool ) – If true, the op also returns the height and width of the output tensor in [N, H, W, C] format,",
            "return_weights_and_bias ( bool ) – If true, the op also returns the preprocessed weight and bias on device ."
        ],
        "keyword_arguments": [],
        "returns": "The output tensor, output height and width, and the preprocessed weights and bias."
    },
    "ttnn.prepare_conv_weights": {
        "parameters": [
            "weight_tensor ( ttnn.Tensor ) – the weight tensor in PyTorch Conv2d format.",
            "input_memory_config ( ttnn.MemoryConfig ) – the memory configuration for the input tensor.",
            "input_layout ( ttnn.Tensor ) – the layout of the input tensor.",
            "weights_format ( ttnn.Tensor ) – the format of the weights tensor. Currently only supports OIHW. (out_channels, in_channels, kernel_height, kernel_width)",
            "in_channels ( int ) – number of input channels.",
            "out_channels ( int ) – number of output channels.",
            "batch_size ( int ) – batch size.",
            "input_height ( int ) – height of the input tensor.",
            "input_width ( int ) – width of the input tensor.",
            "kernel_size ( tuple [ int , int ] ) – size of the convolving kernel.",
            "stride ( tuple [ int , int ] ) – stride of the cross-correlation.",
            "padding ( tuple [ int , int ] or tuple [ int , int , int , int ] ) ) – zero-padding added to both sides of the input. [pad_height, pad_width] or [pad_top, pad_bottom, pad_left, pad_right].",
            "dilation ( tuple [ int , int ] ) – spacing between kernel elements.",
            "has_bias ( bool ) – whether the convolution has a bias term.",
            "groups ( int ) – number of blocked connections from input channels to output channels.",
            "input_dtype ( ttnn.DataType ) – the data type of the input tensor.",
            "output_dtype ( ttnn.DataType , None ) – the data type of the output tensor. Default None (uses input_dtype)",
            "conv_config ( ttnn.Conv2dConfig , None ) – configuration for convolution. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – configuration for compute kernel. Default: None"
        ],
        "keyword_arguments": [],
        "returns": "The preprocessed weight tensor on device"
    },
    "ttnn.prepare_conv_bias": {
        "parameters": [
            "bias ( ttnn.Tensor ) – the bias tensor in PyTorch Conv2d format.",
            "input_memory_config ( ttnn.MemoryConfig ) – the memory configuration for the input tensor.",
            "input_layout ( ttnn.Tensor ) – the layout of the input tensor.",
            "int – in_channels:  number of input channels.",
            "int – out_channels:  number of output channels.",
            "int – batch_size:  batch size.",
            "int – input_height:  height of the input tensor.",
            "int – input_width:  width of the input tensor.",
            "kernel_size ( tuple [ int , int ] ) – size of the convolving kernel.",
            "stride ( tuple [ int , int ] ) – stride of the cross-correlation.",
            "padding ( tuple [ int , int ] or tuple [ int , int , int , int ] ) ) – zero-padding added to both sides of the input. [pad_height, pad_width] or [pad_top, pad_bottom, pad_left, pad_right].",
            "dilation ( tuple [ int , int ] ) – spacing between kernel elements.",
            "device ( ttnn.IDevice ) – the device to use.",
            "input_dtype ( ttnn.DataType ) – the data type of the input tensor.",
            "output_dtype ( ttnn.DataType , None ) – the data type of the output tensor. Default None (uses input_dtype)",
            "groups ( int ) – number of blocked connections from input channels to output channels.",
            "conv_config ( ttnn.Conv2dConfig , None ) – configuration for convolution. This config must have weights_dtype set to the same dtype as the processed weights tensor. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – configuration for compute kernel. Default: None"
        ],
        "keyword_arguments": [],
        "returns": "The preprocessed bias tensor on device"
    },
    "ttnn.prepare_conv_transpose2d_weights": {
        "parameters": [
            "weight_tensor ( ttnn.Tensor ) – the weight tensor in PyTorch Conv2d format.",
            "input_memory_config ( ttnn.MemoryConfig ) – the memory configuration for the input tensor.",
            "input_layout ( ttnn.Tensor ) – the layout of the input tensor.",
            "weights_format ( ttnn.Tensor ) – the format of the weights tensor. Currently only supports IOHW. (in_channels, out_channels, kernel_height, kernel_width)",
            "int – in_channels:  number of input channels.",
            "int – out_channels:  number of output channels.",
            "int – batch_size:  batch size.",
            "int – input_height:  height of the input tensor.",
            "int – input_width:  width of the input tensor.",
            "kernel_size ( tuple [ int , int ] ) – size of the convolving kernel.",
            "stride ( tuple [ int , int ] ) – stride of the cross-correlation.",
            "padding ( tuple [ int , int ] or tuple [ int , int , int , int ] ) ) – zero-padding added to both sides of the input. [pad_height, pad_width] or [pad_top, pad_bottom, pad_left, pad_right].",
            "dilation ( tuple [ int , int ] ) – spacing between kernel elements.",
            "has_bias ( bool ) – whether the convolution has a bias term.",
            "groups ( int ) – number of blocked connections from input channels to output channels.",
            "input_dtype ( ttnn.DataType ) – the data type of the input tensor.",
            "output_dtype ( ttnn.DataType , None ) – the data type of the output tensor. Default None (uses input_dtype)",
            "conv_config ( ttnn.Conv2dConfig , None ) – configuration for convolution. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – configuration for compute kernel. Default: None"
        ],
        "keyword_arguments": [],
        "returns": "The preprocessed weight tensor on device"
    },
    "ttnn.prepare_conv_transpose2d_bias": {
        "parameters": [
            "bias ( ttnn.Tensor ) – the bias tensor in PyTorch Conv2d format.",
            "input_memory_config ( ttnn.MemoryConfig ) – the memory configuration for the input tensor.",
            "input_layout ( ttnn.Tensor ) – the layout of the input tensor.",
            "int – in_channels:  number of input channels.",
            "int – out_channels:  number of output channels.",
            "int – batch_size:  batch size.",
            "int – input_height:  height of the input tensor.",
            "int – input_width:  width of the input tensor.",
            "kernel_size ( tuple [ int , int ] ) – size of the convolving kernel.",
            "stride ( tuple [ int , int ] ) – stride of the cross-correlation.",
            "padding ( tuple [ int , int ] or tuple [ int , int , int , int ] ) ) – zero-padding added to both sides of the input. [pad_height, pad_width] or [pad_top, pad_bottom, pad_left, pad_right].",
            "dilation ( tuple [ int , int ] ) – spacing between kernel elements.",
            "device ( ttnn.IDevice ) – the device to use.",
            "input_dtype ( ttnn.DataType ) – the data type of the input tensor.",
            "output_dtype ( ttnn.DataType , None ) – the data type of the output tensor. Default None (uses input_dtype)",
            "groups ( int ) – number of blocked connections from input channels to output channels.",
            "conv_config ( ttnn.Conv2dConfig , None ) – configuration for convolution. This config must have weights_dtype set to the same dtype as the processed weights tensor. Default: None",
            "compute_config ( ttnn.DeviceComputeKernelConfig , None ) – configuration for compute kernel. Default: None"
        ],
        "keyword_arguments": [],
        "returns": "The preprocessed bias tensor on device"
    },
    "ttnn.Conv2dConfig": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.Conv2dSliceConfig": {
        "parameters": [],
        "keyword_arguments": [],
        "returns": null
    },
    "ttnn.global_avg_pool2d": {
        "parameters": [],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None .",
            "dtype ( ttnn.DataType , optional ) – data type for the output tensor. Defaults to None"
        ],
        "returns": "ttnn.Tensor – the output tensor with the averaged values. The output tensor shape is (batch_size, channels, 1, 1)."
    },
    "ttnn.max_pool2d": {
        "parameters": [
            "input_tensor_a ( ttnn.Tensor ) – the tensor to be convolved.",
            "batch_size ( int ) – the number of batches (N in a [N, C, H, W] shaped tensor).",
            "input_h ( int ) – the height of the input tensor (H in a [N, C, H, W] shaped tensor).",
            "input_w ( int ) – the width of the input tensor (W in a [N, C, H, W] shaped tensor).",
            "channels ( int ) – the number of channels (C in a [N, C, H, W] shaped tensor).",
            "kernel_size ( List of [ int ] ) – the (h, w) size of the kernel window.",
            "stride ( List of [ int ] ) – the (h, w) stride of the kernel window.",
            "padding ( List of [ int ] ) – the (h, w) padding of the input tensor.",
            "dilation ( List of [ int ] ) – the (h, w) dilation of the kernel window.",
            "ceil_mode ( bool ) – whether to use ceil mode for the output shape. Defaults to False ."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – the memory configuration for the output tensor. Defaults to None .",
            "applied_shard_scheme ( ttnn.TensorMemoryLayout , optional ) – the sharding scheme to apply to a non-pre-sharded input tensor. Defaults to None , which should be used with pre-sharded input tensors.",
            "in_place ( bool , optional ) – whether to perform the halo operation in place. Defaults to False .",
            "queue_id ( int , optional ) – the queue id to use for the operation. Defaults to 0 ."
        ],
        "returns": "ttnn.Tensor – the max pool convolved output tensor."
    },
    "ttnn.upsample": {
        "parameters": [
            "input_tensor ( ttnn.Tensor ) – the input tensor.",
            "scale_factor ( int or tt::tt_metal::Array2D ) – multiplier for spatial size."
        ],
        "keyword_arguments": [
            "memory_config ( ttnn.MemoryConfig , optional ) – Memory configuration for the operation. Defaults to None ."
        ],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.kv_cache.fill_cache_for_user_": {
        "parameters": [
            "cache ( ttnn.Tensor ) – the cache tensor to be written to.",
            "input_tensor ( ttnn.Tensor ) – the input tensor to be written to the cache.",
            "batch_index ( int ) – the index into the cache tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    },
    "ttnn.kv_cache.update_cache_for_token_": {
        "parameters": [
            "cache ( ttnn.Tensor ) – the cache tensor to be written to.",
            "token ( ttnn.Tensor ) – the token tensor to be written to the cache.",
            "update_index ( int ) – the index into the cache tensor.",
            "batch_offset ( int ) – the batch_offset into the cache tensor."
        ],
        "keyword_arguments": [],
        "returns": "ttnn.Tensor – the output tensor."
    }
}